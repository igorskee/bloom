################################################## 
# Authentication_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


# import xml.dom.ext.reader as ext.reader
import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://upsidewireless.com/webservice/authentication
##############################

class upsidewireless_com_webservice_authentication:
    targetNamespace = "http://upsidewireless.com/webservice/authentication"

    class AuthenticationParameters_(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://upsidewireless.com/webservice/authentication"
        type = (schema, "AuthenticationParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = upsidewireless_com_webservice_authentication.AuthenticationParameters_.schema
            TClist = [ZSI.TC.String(pname=(ns,"Token"), aname="Token", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Signature"), aname="Signature", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.Token = None
                    self.Signature = None
                    return
            Holder.__name__ = "AuthenticationParameters_Holder"
            self.pyclass = Holder

    class GetParameters(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetParameters"
        schema = "http://upsidewireless.com/webservice/authentication"
        def __init__(self, **kw):
            ns = upsidewireless_com_webservice_authentication.GetParameters.schema
            TClist = [ZSI.TC.String(pname=(ns,"username"), aname="username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://upsidewireless.com/webservice/authentication","GetParameters")
            kw["aname"] = "GetParameters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.username = None
                    self.password = None
                    return
            Holder.__name__ = "GetParameters_Holder"
            self.pyclass = Holder

    class GetParametersResponse(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetParametersResponse"
        schema = "http://upsidewireless.com/webservice/authentication"
        def __init__(self, **kw):
            ns = upsidewireless_com_webservice_authentication.GetParametersResponse.schema
            TClist = [GTD("http://upsidewireless.com/webservice/authentication","AuthenticationParameters",lazy=False)(pname=(ns,"GetParametersResult"), aname="GetParametersResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://upsidewireless.com/webservice/authentication","GetParametersResponse")
            kw["aname"] = "GetParametersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self.GetParametersResult = None
                    return
            Holder.__name__ = "GetParametersResponse_Holder"
            self.pyclass = Holder

    class AuthenticationParameters(ElementDeclaration):
        literal = "AuthenticationParameters"
        schema = "http://upsidewireless.com/webservice/authentication"
        def __init__(self, **kw):
            kw["pname"] = ("http://upsidewireless.com/webservice/authentication","AuthenticationParameters")
            kw["aname"] = "AuthenticationParameters"
            if upsidewireless_com_webservice_authentication.AuthenticationParameters_ not in upsidewireless_com_webservice_authentication.AuthenticationParameters.__bases__:
                bases = list(upsidewireless_com_webservice_authentication.AuthenticationParameters.__bases__)
                bases.insert(0, upsidewireless_com_webservice_authentication.AuthenticationParameters_)
                upsidewireless_com_webservice_authentication.AuthenticationParameters.__bases__ = tuple(bases)

            upsidewireless_com_webservice_authentication.AuthenticationParameters_.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AuthenticationParameters_Holder"

# end class upsidewireless_com_webservice_authentication (tns: http://upsidewireless.com/webservice/authentication)
